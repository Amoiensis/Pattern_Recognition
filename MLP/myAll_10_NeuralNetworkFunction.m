function [y1] = myNeuralNetworkFunction(x1)
%Github https://github.com/Amoiensis/Pattern_Recognition
%% IMFORMATION
% Author: Xiping Yu
% Email:Amoiensis@outlook.com
% Github: https://github.com/Amoiensis/Pattern_Recognition
% Data: 2019.11.02
% Course: Pattern Recognition
% Dtailed: 4_SVM (SVM_支持向量机)
%%
% Auto-generated by MATLAB, 10-Dec-2019 23:22:21.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx10 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [225;16;40;14.87;150;149;40;141.39;158.59;148.1];
x1_step1.gain = [0.0132135306553911;0.0142602495543672;0.0235294117647059;0.0743494423791821;0.0454545454545455;0.0357142857142857;0.0235294117647059;0.0336927223719676;0.0744324525493115;0.0352236703064459];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.9458214425518649549;1.7000527130848148705;-0.55495455386955427901;1.2287278267759245143;-0.85113202083190397929;1.4774365289345623431;0.49432812701006406675;0.94678481011554493918;-1.7814912159695028837;1.7692794570563936674];
IW1_1 = [-0.92108091325308061315 0.47140634049320739862 -0.51464635555790894106 0.14743973577143210107 0.27162872924524228413 0.53230355941732099279 -0.3659473407271623957 -0.53436886658440552189 0.72233275367094273989 0.25484375232511041753;-0.20575768478077757773 0.49601397458581358846 1.0889931205716354423 0.86470326054846768926 0.13618341782084572578 -0.20642693581361865052 0.33513206707993731248 -0.24200033499842651952 0.84858097732759030229 -0.11808651187143347217;0.48256325573987773891 0.68737454120219343423 0.73567641168118858008 -0.074061091911719320602 -0.41984793823924582146 0.35066613484295239278 -0.72122145707111484647 -0.10671185694505201658 -0.20950731372233535876 1.0673611816782160311;0.55107545680128566801 0.66126184798513898411 1.5819959237687635234 -0.17394859647945562497 0.092432488896704967374 0.14366170001152964164 0.1150992314264999844 0.048248205579976784219 -0.30502520648298531158 -0.5899441104002691727;0.53499879474836598003 0.13209810151050890847 0.2388885879525426692 0.95036051773624374839 -0.68428776972475791052 0.6489289302896829037 0.4964107848267474421 0.58802541951439102341 -0.62086018838227208239 0.4390782491480478833;1.9883699340021705471 0.53150619771982454687 0.12419884341560882834 0.60911552229757703891 0.57808007220050883213 -0.93403369397785884765 0.1084586087136298338 0.10083767193190651401 0.065947008907390011756 0.2496164515283037233;0.14403084871729637806 0.6687134123332872937 -0.87694729367331547554 -0.84254162112726271872 0.14959973511969229532 0.83268241453661795415 -0.097235530462932998064 0.65942912128830333263 0.059312766512911577199 -0.030328055967775234547;0.52171954651917429313 -0.5239002736064881649 0.15692651384787015267 0.31785732098059066297 -0.80823014113487889887 0.57861239341948300652 -0.76655262766335485747 -0.73777289752048080818 -0.49819330976862041815 0.22912005885004674277;-0.7615038752361410479 -0.58466768619518527661 -0.42521685631986527731 -0.3886430539819845098 -1.1511446230745188135 -1.0647526121176640324 0.16044571777017532788 -0.47881851346898751665 -0.16280580627879304156 0.34450146292710737139;-0.035535051646086751598 0.72335361858740876428 0.61518208118823847208 -0.8882815444592611076 -0.65762696455035130061 -0.051606515296904680035 -0.19293140269492833894 -0.018196705323261702647 -0.55940744866306968408 -0.78448080700639455376];

% Layer 2
b2 = -0.3655377808660504324;
LW2_1 = [0.41011894271524118594 -1.4243372443381321357 -0.73054462666267194759 -1.5492853048808683525 1.048621732476406887 -2.670760284865612455 0.35212786387994343684 -0.010542445762948590704 1.8591544939852131524 0.61607095272208789449];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = logsig_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Positive Transfer Function
function a = logsig_apply(n,~)
a = 1 ./ (1 + exp(-n));
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

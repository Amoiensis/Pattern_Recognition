function [y1] = my20_10_NeuralNetworkFunction(x1)
%Github https://github.com/Amoiensis/Pattern_Recognition
%MYNEURALNETWORKFUNCTION neural network simulation function.
%% IMFORMATION
% Author: Xiping Yu
% Email:Amoiensis@outlook.com
% Github: https://github.com/Amoiensis/Pattern_Recognition
% Data: 2019.11.02
% Course: Pattern Recognition
% Dtailed: 4_SVM (SVM_支持向量机)
%%
%
% Auto-generated by MATLAB, 13-Dec-2019 09:37:34.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx10 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [256;21.16;46;17.65;160;157;43;156.28;163.85;155.16];
x1_step1.gain = [0.0231884057971014;0.0253678335870117;0.037037037037037;0.17286084701815;0.08;0.0625;0.0540540540540541;0.0518134715025907;0.134770889487871;0.0551419906258616];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.049772528819101769;-1.4959265916313362332;0.9912473870513835994;0.68023854484047008295;-0.1582468707956515841;0.094538072874356754438;-0.26857950026499988194;-1.3015451842812075789;-1.5144272625747647876;-2.1248847505561681004];
IW1_1 = [0.59109745516009093436 1.2383445978446463442 0.87829685772744470196 -0.285010390993550633 1.7879648595708952374 -0.51869839515715476796 -0.11056049123266066536 -0.72059615657497533281 0.61028272669423766494 -0.18307331365806134293;0.24655091648286966977 0.38959973037816147956 0.046466984071213440766 -0.46453685456991972158 -0.69008045051010502569 -0.976404621332113698 -0.76772273959402514976 0.65541190003086691185 -0.14149574971577744131 0.7410639917059234083;-0.23393577021876846289 0.44591705456738495172 0.73434011848955593749 -0.46107999969547436292 1.0571165103258686191 0.40793852153392401449 -0.30014537358015752622 -0.049909534519113674111 0.8160105713198967381 -0.61829764358613359398;-0.24293486186398061122 0.24491475304056511964 -0.065576075666823788191 0.26774789598899428889 1.500498539814607124 -0.086999893178284604112 -0.13527236541402284931 -1.1134612483290615703 0.14415902453595660915 -0.1249459674970413714;-0.056091934042232435842 1.1432076295853730308 0.73733587371705899827 1.1588285783418410535 0.34502638119533990402 0.79194248263398203669 -0.60239594903317605912 -0.041927406534660219273 -0.50611815033278417797 -0.4055921311972012222;-0.9914393317938747785 0.55863143194228281896 -0.13079336591825438396 -0.97073903862335986226 -0.43291876960515257577 -0.54156607383146937451 -0.55626825539515889485 -0.09692843962779609801 -1.0811477040373125291 -0.18982925980423737133;-0.15710986295711540373 0.73883030511792102679 0.25166538680112926496 0.25859374353621084053 0.92233928741772419624 0.59033440465292541521 0.18890915109605235789 -0.6530477580573776919 -0.30048084164478128244 0.90415016301937567444;-0.12624957936111566581 0.29670090098049173299 0.045637646837946438394 0.75660873382918814034 -0.11748144091891309093 1.0946991704573372228 -0.56554375284749047736 -0.4652843994473084277 0.0020999107534078222115 0.80686968444700002401;-0.35398088114152875816 1.0460144876573320705 -0.1180772377454115396 0.87925642724258068483 -0.52416116308311799799 0.62650852543537960404 0.33523878030172210574 -0.069420321604941617744 0.37796970876592089761 -0.21644380157787676544;0.37001760611290579472 0.067837243274220290767 -0.37223479379918666954 -0.66225494152786812396 0.23155948420811955923 -0.49472428540662927166 -0.64495998594499448497 -0.3240545995736823226 -0.47486446531185944053 0.31473067366823814783];

% Layer 2
b2 = -0.47798401051978689491;
LW2_1 = [-1.8161478947073772527 1.6262921152506490952 -0.80034351843821727179 -1.1705936585848899512 -0.97647261792196615726 1.1019705746915884337 -0.75846859491475393522 -0.33803331199805541907 -0.31041373820958845231 -0.26713385457808735968];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = logsig_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Positive Transfer Function
function a = logsig_apply(n,~)
a = 1 ./ (1 + exp(-n));
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

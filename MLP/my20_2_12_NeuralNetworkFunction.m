function [y1] = my20_2_12_NeuralNetworkFunction(x1)
%Github https://github.com/Amoiensis/Pattern_Recognition
%MYNEURALNETWORKFUNCTION neural network simulation function.
%% IMFORMATION
% Author: Xiping Yu
% Email:Amoiensis@outlook.com
% Github: https://github.com/Amoiensis/Pattern_Recognition
% Data: 2019.11.02
% Course: Pattern Recognition
% Dtailed: 4_SVM (SVM_支持向量机)
%%
%
% Auto-generated by MATLAB, 13-Dec-2019 10:35:37.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx2 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [256;21.16];
x1_step1.gain = [0.0231884057971014;0.0253678335870117];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.424974055501926351;3.4066245101586689614;2.4647378533166532932;-1.5429146337428625291;0.24333638039343047366;-0.1181582631236815506;1.5186736441336632364;-2.3211413036375989627;-4.1495192631679760353;4.2035857801049472116];
IW1_1 = [3.8335111866553894799 -2.2160801895344728329;-0.33419775828106268456 -4.4368501279482410737;-4.3187070813759751431 0.96566198713731443704;3.7850014366069006932 -2.2588998042882102446;1.791514085627294417 -4.0839662847316082761;-0.98340290398342544709 4.3203465672898238026;2.1646559116033148307 -3.8578472947943533988;-1.9600975489505432225 -4.012474598032954809;-2.6410434880227793286 -2.6845671299843743007;1.3615380862070016743 4.3514927103605600678];

% Layer 2
b2 = -0.33642125835262737255;
LW2_1 = [-0.078618868112826867378 1.3262317212588561333 0.038478146127940718313 -0.63539074127191175201 -0.35377185250773784952 -1.142047153632238965 -0.26314588906027480686 0.73136701284554661573 2.4488541690347558344 -1.3742158452341743935];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = logsig_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Positive Transfer Function
function a = logsig_apply(n,~)
a = 1 ./ (1 + exp(-n));
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
